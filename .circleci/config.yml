version: 2.1

defaults: &defaults
  working_directory: /home/nerves/build
  environment:
    ENV: CI
  docker:
    - image: nervesproject/toolchains-nonexistant
  resource_class: large

orbs:
  my-macos: circleci/macos@1.1.0
  #mac-permissions: circleci/macos
  # This will likely have to change since it means we're using a docker container instead of running on macOS
  # https://circleci.com/docs/2.0/executor-types/

install_hex_rebar: &install_hex_rebar
  run:
    name: Install hex and rebar
    command: |
      mix local.hex --force
      mix local.rebar --force

install_nerves_bootstrap: &install_nerves_bootstrap
  run:
    name: Install nerves_bootstrap
    command: mix archive.install hex nerves_bootstrap --force

build: &build
  steps:
    - checkout
    - <<: *install_hex_rebar
    - <<: *install_nerves_bootstrap
    - run: echo "$TOOLCHAIN" > .toolchain
    - run: echo "$BUILD_OS" > .build_os
    - restore_cache:
        key: nerves/dl/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Branch }}
    - run:
        name: Update Path
        command: |
          echo 'export PATH=$HOME/build/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin:$PATH' >> $BASH_ENV
          source $BASH_ENV
    - run:
        name: Fetch Dependencies
        # This downloads the raspberrypi tools (which is where raspbian comes from)
        command: git clone git://github.com/raspberrypi/tools.git
    - run:
        name: Fetch Deps
        command: |
          cd $TOOLCHAIN
          mix deps.get
    - run:
        name: Build
        command: |
          cd $TOOLCHAIN
          mix compile
    - run:
        name: "Create artifact dir"
        command: mkdir -p /home/nerves/deploy/toolchain
    - run:
        name: Create artifact
        command: |
          cd $TOOLCHAIN
          mix nerves.artifact $TOOLCHAIN --path /home/nerves/deploy/toolchain
    - save_cache:
        key: nerves/dl/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Branch }}
        paths:
          - $HOME/.nerves/dl
    - store_artifacts:
        path: /home/nerves/deploy/toolchain
        destination: toolchain
    - save_cache:
        key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
        paths:
          - /home/nerves/deploy/toolchain

build_mac: &build_mac
  #xcode: 11.7.0
  steps:
  - checkout
  # Free up extra space on macOS
  # https://support.circleci.com/hc/en-us/articles/360037142773-Freeing-up-Disk-Space-on-macOS
  - run:
      name: df
      command: df -h
  - run:
      name: Free up extra space
      command: sudo rm -rf /Library/Developer/CoreSimulator/Profiles/Runtimes/
  - run:
      name: df
      command: df -h
  - run:
      name: Install cowsay
      command: brew install cowsay
  - run:
      name: cowsay hi
      command: cowsay Hi!
  - run:
      name: brew deps
      command: |
        brew update
        brew upgrade
        brew install gawk binutils xz wget automake gnu-tar help2man bash make ncurses libtool gnu-sed mpfr gmp gcc bison lzip python3 grep coreutils elixir erlang
  - <<: *install_hex_rebar
  - <<: *install_nerves_bootstrap
  - run:
      name: Build release
      command: ./build_release.sh

test: &test
  working_directory: /home/nerves/build
  steps:
    - checkout
    - run:
        name: Setup Cache Vars
        command: |
            echo "$TOOLCHAIN" > .toolchain
            echo "$BUILD_OS" > .build_os
    - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
    - run:
        name: Install xz
        command: |
          apt-get update
          apt-get -y install xz-utils
    - run:
        name: Decompress toolchain archive
        command: |
          mkdir -p /root/toolchain
          tar xvf /home/nerves/deploy/toolchain/*.tar.xz --strip-components=1 -C /root/toolchain
    - run:
        name: Compile hello world app
        command: /root/toolchain/bin/*-g++ /home/nerves/build/support/smoketest/main.cpp

#-------------------------------
# Re-usable YAML anchors (to be merged with `<<`)
#-------------------------------
docker_default: &docker_default
  docker:
    - image: nervesproject/toolchains

build_workflow: &build_workflow
  context: org-global
  filters:
    tags:
      only: /.*/

test_workflow: &test_workflow
  context: org-global
  filters:
    tags:
      only: /.*/

deploy_workflow: &deploy_workflow
  context: org-global
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /v.*/

canadian_rpi: &canadian_rpi
  HOST_OS: linux
  HOST_ARCH: arm
  BUILD_OS: rpi

mac_xcode: &mac_xcode
  xcode: 11.7.0

mac_env: &mac_env
  BUILD_OS: darwin
  HOMEBREW_NO_AUTO_UPDATE: 1

linux_env: &linux_env
  BUILD_OS: linux

jobs:
  #-------------------------------
  # Build
  #-------------------------------
  # aarch64_nerves_linux_gnu
  #-------------------------------
  # build
  #  linux
  build_linux_nerves_toolchain_aarch64_nerves_linux_gnu:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_aarch64_nerves_linux_gnu
      <<: *linux_env
    <<: *build
  #  rpi
  build_rpi_nerves_toolchain_aarch64_nerves_linux_gnu:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_aarch64_nerves_linux_gnu
      <<: *canadian_rpi
    <<: *build

  build_mac_nerves_toolchain_aarch64_nerves_mac_gnu:
    macos:
      <<: *mac_xcode
    # TODO: these should be in mac_defaults
    #working_directory: /home/nerves/build
    environment:
    # Don't need darwin_arm
      TOOLCHAIN: nerves_toolchain_aarch64_nerves_linux_gnu-darwin_arm
      ENV: CI
      <<: *mac_env
    <<: *build_mac

  #-------------------------------
  # armv7_nerves_linux_gnueabihf
  #-------------------------------
  # build
  #  linux
  build_linux_nerves_toolchain_armv7_nerves_linux_gnueabihf:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_armv7_nerves_linux_gnueabihf
      <<: *linux_env
    <<: *build
  #  rpi
  build_rpi_nerves_toolchain_armv7_nerves_linux_gnueabihf:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_armv7_nerves_linux_gnueabihf
      <<: *canadian_rpi
    <<: *build

  #-------------------------------
  # armv5_nerves_linux_musleabi 1 (jobs) (build)
  #-------------------------------
  # build
  #  linux
  build_linux_nerves_toolchain_armv5_nerves_linux_musleabi:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_armv5_nerves_linux_musleabi
      <<: *linux_env
    <<: *build
  #  rpi
  build_rpi_nerves_toolchain_armv5_nerves_linux_musleabi:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_armv5_nerves_linux_musleabi
      <<: *canadian_rpi
    <<: *build

  #-------------------------------
  # armv6_nerves_linux_gnueabi
  #-------------------------------
  # build
  #  linux
  build_linux_nerves_toolchain_armv6_nerves_linux_gnueabihf:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_armv6_nerves_linux_gnueabihf
      <<: *linux_env
    <<: *build

  #  rpi
  build_rpi_nerves_toolchain_armv6_nerves_linux_gnueabihf:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_armv6_nerves_linux_gnueabihf
      <<: *canadian_rpi
    <<: *build

  #-------------------------------
  # i586_nerves_linux_gnu
  #-------------------------------
  # build
  #  linux
  build_linux_nerves_toolchain_i586_nerves_linux_gnu:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_i586_nerves_linux_gnu
      <<: *linux_env
    <<: *build
  #  rpi
  build_rpi_nerves_toolchain_i586_nerves_linux_gnu:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_i586_nerves_linux_gnu
      <<: *canadian_rpi
    <<: *build

  #-------------------------------
  # mipsel_nerves_linux_musl
  #-------------------------------
  # build
  #  linux
  build_linux_nerves_toolchain_mipsel_nerves_linux_musl:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_mipsel_nerves_linux_musl
      <<: *linux_env
    <<: *build
  #  rpi
  build_rpi_nerves_toolchain_mipsel_nerves_linux_musl:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_mipsel_nerves_linux_musl
      <<: *canadian_rpi
    <<: *build

  #-------------------------------
  # x86_64_nerves_linux_gnu
  #-------------------------------
  # build
  #  linux
  build_linux_nerves_toolchain_x86_64_nerves_linux_gnu:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_x86_64_nerves_linux_gnu
      <<: *linux_env
    <<: *build
  #  rpi
  build_rpi_nerves_toolchain_x86_64_nerves_linux_gnu:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_x86_64_nerves_linux_gnu
      <<: *canadian_rpi
    <<: *build

  #-------------------------------
  # x86_64_nerves_linux_musl
  #-------------------------------
  # build
  #  linux
  build_linux_nerves_toolchain_x86_64_nerves_linux_musl:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_x86_64_nerves_linux_musl
      <<: *linux_env
    <<: *build
  #  rpi
  build_rpi_nerves_toolchain_x86_64_nerves_linux_musl:
    <<: [ *defaults, *docker_default ]
    environment:
      TOOLCHAIN: nerves_toolchain_x86_64_nerves_linux_musl
      <<: *canadian_rpi
    <<: *build


  test_mac_trusty_aarch64_nerves_linux_gnu-darwin_x86_64:
    working_directory: /root
    docker:
      - image: nervesproject/toolchain-test-ubuntu:trusty
    environment:
      # TODO: Should this be mac_gnu?
               # nerves_toolchain_armv7_nerves_linux_gnueabihf-darwin_x86_64-1.4.2
               # nerves_toolchain_aarch64_nerves_linux_gnu
      TOOLCHAIN: nerves_toolchain_aarch64_nerves_linux_gnu-darwin_arm
      # TODO: add this as well
      # nerves_toolchain_aarch64_nerves_linux_gnu-darwin_x86_64
      <<: *mac_env
    <<: *test

  #-------------------------------
  # riscv64_nerves_linux_gnu
  #-------------------------------
  # build
  #  linux
  build_linux_nerves_toolchain_riscv64_nerves_linux_gnu:
    <<: *defaults
    environment:
      TOOLCHAIN: nerves_toolchain_riscv64_nerves_linux_gnu
      <<: *linux
    <<: *build

   #-------------------------------
  # Test Trusty (14.04)
  #-------------------------------
  # aarch64_nerves_linux_gnu
  #-------------------------------
  # test
  #  linux
  test_linux_trusty_aarch64_nerves_linux_gnu:
    docker:
      - image: ubuntu:trusty
    environment:
      TOOLCHAIN: nerves_toolchain_aarch64_nerves_linux_gnu
      <<: *linux_env
    <<: *test


  #-------------------------------
  # armv7_nerves_linux_gnueabihf
  #-------------------------------
  # test
  #  linux
  test_linux_trusty_armv7_nerves_linux_gnueabihf:
    docker:
      - image: ubuntu:trusty
    environment:
      TOOLCHAIN: nerves_toolchain_armv7_nerves_linux_gnueabihf
      <<: *linux_env
    <<: *test

  #-------------------------------
  # armv5_nerves_linux_musleabi 2 (test)
  #-------------------------------
  # test
  #  linux
  test_linux_trusty_armv5_nerves_linux_musleabi:
    docker:
      - image: ubuntu:trusty
    environment:
      TOOLCHAIN: nerves_toolchain_armv5_nerves_linux_musleabi
      <<: *linux_env
    <<: *test

  #-------------------------------
  # armv6_nerves_linux_gnueabi
  #-------------------------------
  # test
  #  linux
  test_linux_trusty_armv6_nerves_linux_gnueabi:
    docker:
      - image: ubuntu:trusty
    environment:
      TOOLCHAIN: nerves_toolchain_armv6_nerves_linux_gnueabihf
      <<: *linux_env
    <<: *test

  #-------------------------------
  # i586_nerves_linux_gnu
  #-------------------------------
  # test
  #  linux
  test_linux_trusty_i586_nerves_linux_gnu:
    docker:
      - image: ubuntu:trusty
    environment:
      TOOLCHAIN: nerves_toolchain_i586_nerves_linux_gnu
      <<: *linux_env
    <<: *test

  #-------------------------------
  # mipsel_nerves_linux_musl
  #-------------------------------
  # test
  #  linux
  test_linux_trusty_mipsel_nerves_linux_musl:
    docker:
      - image: ubuntu:trusty
    environment:
      TOOLCHAIN: nerves_toolchain_mipsel_nerves_linux_musl
      <<: *linux_env
    <<: *test

  #-------------------------------
  # x86_64_nerves_linux_gnu
  #-------------------------------
  # test
  #  linux
  test_linux_trusty_x86_64_nerves_linux_gnu:
    docker:
      - image: ubuntu:trusty
    environment:
      TOOLCHAIN: nerves_toolchain_x86_64_nerves_linux_gnu
      <<: *linux_env
    <<: *test

  #-------------------------------
  # x86_64_nerves_linux_musl
  #-------------------------------
  # test
  #  linux
  test_linux_trusty_x86_64_nerves_linux_musl:
    docker:
      - image: ubuntu:trusty
    environment:
      TOOLCHAIN: nerves_toolchain_x86_64_nerves_linux_musl
      <<: *linux_env
    <<: *test

  #-------------------------------
  # riscv64_nerves_linux_gnu
  #-------------------------------
  # test
  #  linux
  test_linux_trusty_riscv64_nerves_linux_gnu:
    docker:
      - image: ubuntu:trusty
    environment:
      TOOLCHAIN: nerves_toolchain_riscv64_nerves_linux_gnu
      <<: *linux
    <<: *test

  #-------------------------------
  # Test Xenial (16.04)
  #-------------------------------
  # aarch64_nerves_linux_gnu
  #-------------------------------
  # test
  #  linux
  test_linux_xenial_aarch64_nerves_linux_gnu:
    docker:
      - image: ubuntu:xenial
    environment:
      TOOLCHAIN: nerves_toolchain_aarch64_nerves_linux_gnu
      <<: *linux_env
    <<: *test


  #-------------------------------
  # armv7_nerves_linux_gnueabihf
  #-------------------------------
  # test
  #  linux
  test_linux_xenial_armv7_nerves_linux_gnueabihf:
    docker:
      - image: ubuntu:xenial
    environment:
      TOOLCHAIN: nerves_toolchain_armv7_nerves_linux_gnueabihf
      <<: *linux_env
    <<: *test

  #-------------------------------
  # armv5_nerves_linux_musleabi (3)
  #-------------------------------
  # test
  #  linux
  test_linux_xenial_armv5_nerves_linux_musleabi:
    docker:
      - image: ubuntu:xenial
    environment:
      TOOLCHAIN: nerves_toolchain_armv5_nerves_linux_musleabi
      <<: *linux_env
    <<: *test

  #-------------------------------
  # armv6_nerves_linux_gnueabi
  #-------------------------------
  # test
  #  linux
  test_linux_xenial_armv6_nerves_linux_gnueabi:
    docker:
      - image: ubuntu:xenial
    environment:
      TOOLCHAIN: nerves_toolchain_armv6_nerves_linux_gnueabihf
      <<: *linux_env
    <<: *test

  #-------------------------------
  # i586_nerves_linux_gnu
  #-------------------------------
  # test
  #  linux
  test_linux_xenial_i586_nerves_linux_gnu:
    docker:
      - image: ubuntu:xenial
    environment:
      TOOLCHAIN: nerves_toolchain_i586_nerves_linux_gnu
      <<: *linux_env
    <<: *test

  #-------------------------------
  # mipsel_nerves_linux_musl
  #-------------------------------
  # test
  #  linux
  test_linux_xenial_mipsel_nerves_linux_musl:
    docker:
      - image: ubuntu:xenial
    environment:
      TOOLCHAIN: nerves_toolchain_mipsel_nerves_linux_musl
      <<: *linux_env
    <<: *test

  #-------------------------------
  # x86_64_nerves_linux_gnu
  #-------------------------------
  # test
  #  linux
  test_linux_xenial_x86_64_nerves_linux_gnu:
    docker:
      - image: ubuntu:xenial
    environment:
      TOOLCHAIN: nerves_toolchain_x86_64_nerves_linux_gnu
      <<: *linux_env
    <<: *test

  #-------------------------------
  # x86_64_nerves_linux_musl
  #-------------------------------
  # test
  #  linux
  test_linux_xenial_x86_64_nerves_linux_musl:
    docker:
      - image: ubuntu:xenial
    environment:
      TOOLCHAIN: nerves_toolchain_x86_64_nerves_linux_musl
      <<: *linux_env
    <<: *test

<<<<<<< HEAD
  #-------------------------------
  # riscv64_nerves_linux_gnu
  #-------------------------------
  # test
  #  linux
  test_linux_xenial_riscv64_nerves_linux_gnu:
    docker:
      - image: ubuntu:xenial
    environment:
      TOOLCHAIN: nerves_toolchain_riscv64_nerves_linux_gnu
      <<: *linux
    <<: *test


  # Spot checks on aarch64 across more platforms

  #-------------------------------
  # Test Bionic (18.04)
  #-------------------------------
  # aarch64_nerves_linux_gnu
  #-------------------------------
  # test
  #  linux
  test_linux_bionic_aarch64_nerves_linux_gnu:
    docker:
      - image: ubuntu:bionic
    environment:
      TOOLCHAIN: nerves_toolchain_aarch64_nerves_linux_gnu
      <<: *linux
    <<: *test

  #-------------------------------
  # Test Focal (20.04)
  #-------------------------------
  # aarch64_nerves_linux_gnu
  #-------------------------------
  # test
  #  linux
  test_linux_focal_aarch64_nerves_linux_gnu:
    docker:
      - image: ubuntu:focal
    environment:
      TOOLCHAIN: nerves_toolchain_aarch64_nerves_linux_gnu
      <<: *linux
    <<: *test

  #-------------------------------
  # Test Jammy (22.04)
  #-------------------------------
  # aarch64_nerves_linux_gnu
  #-------------------------------
  # test
  #  linux
  test_linux_jammy_aarch64_nerves_linux_gnu:
    docker:
      - image: ubuntu:jammy
    environment:
      TOOLCHAIN: nerves_toolchain_aarch64_nerves_linux_gnu
      <<: *linux
    <<: *test

=======
  # build_macos_toolchain:
  #   #working_directory: /home/nerves/build
  #   environment:
  #     <<: *mac_env
  #   <<: *mac_xcode
  #   steps:
  #   - checkout
  #   - run:
  #       name: Install cowsay
  #       command: brew install cowsay
  #   - run:
  #       name: cowsay hi
  #       command: cowsay Hi!
  #   - run:
  #       name: brew deps
  #       command: brew install gawk binutils xz wget automake gnu-tar help2man bash make ncurses libtool autoconf gnu-sed mpfr gmp gcc bison lzip python3 grep coreutils elixir erlang
  #   - <<: *install_hex_rebar
  #   - <<: *install_nerves_bootstrap
  #   - run:
  #       name: Build release
  #       command: ./build_release.sh


>>>>>>> 747e2d0 (WIP Mac building)
  deploy:
    # Hmmmmmmm, do I need to replace this whole section?
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Create Artifacts Dir
          command: mkdir -p /home/nerves/deploy/artifacts
      # These steps seem a bit odd. Could they be paramaterized?
      - run:
          name: nerves_toolchain_aarch64_nerves_linux_gnu
          command: echo "nerves_toolchain_aarch64_nerves_linux_gnu" > .toolchain
      - run:
          name: linux
          command: echo "linux" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: rpi
          command: echo "rpi" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: nerves_toolchain_armv7_nerves_linux_gnueabihf
          command: echo "nerves_toolchain_armv7_nerves_linux_gnueabihf" > .toolchain
      - run:
          name: linux
          command: echo "linux" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: rpi
          command: echo "rpi" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: nerves_toolchain_armv5_nerves_linux_musleabi
          command: echo "nerves_toolchain_armv5_nerves_linux_musleabi" > .toolchain
      - run:
          name: linux
          command: echo "linux" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: rpi
          command: echo "rpi" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: nerves_toolchain_armv6_nerves_linux_gnueabihf
          command: echo "nerves_toolchain_armv6_nerves_linux_gnueabihf" > .toolchain
      - run:
          name: linux
          command: echo "linux" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: rpi
          command: echo "rpi" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: nerves_toolchain_i586_nerves_linux_gnu
          command: echo "nerves_toolchain_i586_nerves_linux_gnu" > .toolchain
      - run:
          name: linux
          command: echo "linux" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: rpi
          command: echo "rpi" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: nerves_toolchain_mipsel_nerves_linux_musl
          command: echo "nerves_toolchain_mipsel_nerves_linux_musl" > .toolchain
      - run:
          name: linux
          command: echo "linux" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: rpi
          command: echo "rpi" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: nerves_toolchain_x86_64_nerves_linux_gnu
          command: echo "nerves_toolchain_x86_64_nerves_linux_gnu" > .toolchain
      - run:
          name: linux
          command: echo "linux" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: rpi
          command: echo "rpi" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: nerves_toolchain_x86_64_nerves_linux_musl
          command: echo "nerves_toolchain_x86_64_nerves_linux_musl" > .toolchain
      - run:
          name: linux
          command: echo "linux" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: rpi
          command: echo "rpi" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: nerves_toolchain_riscv64_nerves_linux_gnu
          command: echo "nerves_toolchain_riscv64_nerves_linux_gnu" > .toolchain
      - run:
          name: linux
          command: echo "linux" > .build_os
      - restore_cache:
          key: nerves/deploy/{{ checksum ".toolchain" }}/{{ checksum ".build_os" }}-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
          name: Copy Artifacts
          command: cp /home/nerves/deploy/toolchain/*.tar.xz /home/nerves/deploy/artifacts
      # Will need to run these steps on macos as well
      - run:
          name: Install dependencies
          command: |
            wget https://github.com/tcnksm/ghr/releases/download/v0.5.4/ghr_v0.5.4_linux_amd64.zip
            unzip ghr_v0.5.4_linux_amd64.zip
      - run:
          name: "Create Release Notes"
          command: grep -Pazo "(?s)(?<=## ${CIRCLE_TAG})[^#]+" ./CHANGELOG.md > /home/nerves/deploy/RELEASE_NOTES
      - run:
          name: Deploy artifacts to Github
          command: ./ghr -draft -t $GITHUB_TOKEN -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME -b "$(cat /home/nerves/deploy/RELEASE_NOTES)" $CIRCLE_TAG /home/nerves/deploy/artifacts

workflows:
  version: 2
  build_test_deploy:
    jobs:
      #-------------------------------
      # Build Toolchains
      #-------------------------------
      - build_mac_nerves_toolchain_aarch64_nerves_mac_gnu:
          <<: *build_workflow

      # aarch64_nerves_linux_gnu
      #-------------------------------
      - build_linux_nerves_toolchain_aarch64_nerves_linux_gnu:
          <<: *build_workflow
      - build_rpi_nerves_toolchain_aarch64_nerves_linux_gnu:
          <<: *build_workflow

      #-------------------------------
      # armv7_nerves_linux_gnueabihf
      #-------------------------------
      - build_linux_nerves_toolchain_armv7_nerves_linux_gnueabihf:
          <<: *build_workflow
      - build_rpi_nerves_toolchain_armv7_nerves_linux_gnueabihf:
          <<: *build_workflow

      #-------------------------------
      # armv5_nerves_linux_musleabi
      #-------------------------------
      - build_linux_nerves_toolchain_armv5_nerves_linux_musleabi:
          <<: *build_workflow
      - build_rpi_nerves_toolchain_armv5_nerves_linux_musleabi:
          <<: *build_workflow

      #-------------------------------
      # armv6_nerves_linux_gnueabi
      #-------------------------------
      - build_linux_nerves_toolchain_armv6_nerves_linux_gnueabihf:
          <<: *build_workflow
      - build_rpi_nerves_toolchain_armv6_nerves_linux_gnueabihf:
          <<: *build_workflow

      #-------------------------------
      # i586_nerves_linux_gnu
      #-------------------------------
      - build_linux_nerves_toolchain_i586_nerves_linux_gnu:
          <<: *build_workflow
      - build_rpi_nerves_toolchain_i586_nerves_linux_gnu:
          <<: *build_workflow

      #-------------------------------
      # mipsel_nerves_linux_musl
      #-------------------------------
      - build_linux_nerves_toolchain_mipsel_nerves_linux_musl:
          <<: *build_workflow
      - build_rpi_nerves_toolchain_mipsel_nerves_linux_musl:
          <<: *build_workflow

      #-------------------------------
      # x86_64_nerves_linux_gnu
      #-------------------------------
      - build_linux_nerves_toolchain_x86_64_nerves_linux_gnu:
          <<: *build_workflow
      - build_rpi_nerves_toolchain_x86_64_nerves_linux_gnu:
          <<: *build_workflow

      #-------------------------------
      # x86_64_nerves_linux_musl
      #-------------------------------
      - build_linux_nerves_toolchain_x86_64_nerves_linux_musl:
          <<: *build_workflow
      - build_rpi_nerves_toolchain_x86_64_nerves_linux_musl:
          <<: *build_workflow

      #-------------------------------
      # riscv64_nerves_linux_gnu
      #-------------------------------
      - build_linux_nerves_toolchain_riscv64_nerves_linux_gnu:
          <<: *build_workflow

      #-------------------------------
      # Test Toolchains
      #-------------------------------
      # aarch64_nerves_linux_gnu
      #-------------------------------
      - test_linux_trusty_aarch64_nerves_linux_gnu:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_aarch64_nerves_linux_gnu
      - test_linux_xenial_aarch64_nerves_linux_gnu:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_aarch64_nerves_linux_gnu
      - test_linux_bionic_aarch64_nerves_linux_gnu:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_aarch64_nerves_linux_gnu
      - test_linux_focal_aarch64_nerves_linux_gnu:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_aarch64_nerves_linux_gnu
      - test_linux_jammy_aarch64_nerves_linux_gnu:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_aarch64_nerves_linux_gnu

      #-------------------------------
      # armv7_nerves_linux_gnueabihf
      #-------------------------------
      - test_linux_trusty_armv7_nerves_linux_gnueabihf:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_armv7_nerves_linux_gnueabihf
      - test_linux_xenial_armv7_nerves_linux_gnueabihf:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_armv7_nerves_linux_gnueabihf

      #-------------------------------
      # armv5_nerves_linux_musleabi
      #-------------------------------
      - test_linux_trusty_armv5_nerves_linux_musleabi:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_armv5_nerves_linux_musleabi
      - test_linux_xenial_armv5_nerves_linux_musleabi:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_armv5_nerves_linux_musleabi

      #-------------------------------
      # armv6_nerves_linux_gnueabi
      #-------------------------------
      - test_linux_trusty_armv6_nerves_linux_gnueabi:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_armv6_nerves_linux_gnueabihf
      - test_linux_xenial_armv6_nerves_linux_gnueabi:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_armv6_nerves_linux_gnueabihf

      #-------------------------------
      # i586_nerves_linux_gnu
      #-------------------------------
      - test_linux_trusty_i586_nerves_linux_gnu:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_i586_nerves_linux_gnu
      - test_linux_xenial_i586_nerves_linux_gnu:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_i586_nerves_linux_gnu

      #-------------------------------
      # mipsel_nerves_linux_musl
      #-------------------------------
      - test_linux_trusty_mipsel_nerves_linux_musl:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_mipsel_nerves_linux_musl
      - test_linux_xenial_mipsel_nerves_linux_musl:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_mipsel_nerves_linux_musl

      #-------------------------------
      # x86_64_nerves_linux_gnu
      #-------------------------------
      - test_linux_trusty_x86_64_nerves_linux_gnu:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_x86_64_nerves_linux_gnu
      - test_linux_xenial_x86_64_nerves_linux_gnu:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_x86_64_nerves_linux_gnu

      #-------------------------------
      # x86_64_nerves_linux_musl
      #-------------------------------
      - test_linux_trusty_x86_64_nerves_linux_musl:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_x86_64_nerves_linux_musl
      - test_linux_xenial_x86_64_nerves_linux_musl:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_x86_64_nerves_linux_musl

      #-------------------------------
      # riscv64_nerves_linux_gnu
      #-------------------------------
      - test_linux_trusty_riscv64_nerves_linux_gnu:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_riscv64_nerves_linux_gnu
      - test_linux_xenial_riscv64_nerves_linux_gnu:
          <<: *test_workflow
          requires:
            - build_linux_nerves_toolchain_riscv64_nerves_linux_gnu

      # macOS Stuff
      #-------------------------------
      # https://circleci.com/docs/2.0/testing-macos/
      # https://circleci.com/docs/2.0/hello-world-macos/
      # Example mac application: https://github.com/CircleCI-Public/circleci-demo-macos
      # Using homebrew on CircleCI: https://circleci.com/docs/2.0/testing-ios/#using-homebrew
      # Maybe disable homebrew auto-update https://circleci.com/docs/2.0/testing-ios/#optimizing-homebrew
      # Will probably require a macOS orb: https://circleci.com/developer/orbs/orb/circleci/macos
      #
      # From Frank
      # brew update
      # brew install gawk binutils xz wget automake gnu-tar help2man bash make ncurses
      # brew install libtool autoconf gnu-sed mpfr gmp gcc bison lzip python3 grep coreutils
      # mix archive.install hex nerves_bootstrap
      # git clone https://github.com/nerves-project/toolchains.git
      # cd toolchains
      # ./build_release.sh
      # <wait>
      # copy *.tar.xz to GitHub releases
      -  test_mac_trusty_aarch64_nerves_linux_gnu-darwin_x86_64:
          # TODO: Is test_workflow correct?
          <<: *test_workflow
          requires:
            - build_mac_nerves_toolchain_aarch64_nerves_mac_gnu

      #-------------------------------
      # Deploy Toolchains
      #-------------------------------
      - deploy:
          <<: *deploy_workflow
          requires:
            # aarch64 linux gnu
            - test_linux_trusty_aarch64_nerves_linux_gnu
            - test_linux_xenial_aarch64_nerves_linux_gnu
            - build_rpi_nerves_toolchain_aarch64_nerves_linux_gnu

            # armv7 linux gnueabihf
            - test_linux_trusty_armv7_nerves_linux_gnueabihf
            - test_linux_xenial_armv7_nerves_linux_gnueabihf
            - build_rpi_nerves_toolchain_armv7_nerves_linux_gnueabihf

            # armv5 linux musleabi
            - test_linux_trusty_armv5_nerves_linux_musleabi
            - test_linux_xenial_armv5_nerves_linux_musleabi
            - build_rpi_nerves_toolchain_armv5_nerves_linux_musleabi

            # armv6 linux gnueabi
            - test_linux_trusty_armv6_nerves_linux_gnueabi
            - test_linux_xenial_armv6_nerves_linux_gnueabi
            - build_rpi_nerves_toolchain_armv6_nerves_linux_gnueabihf

            # i586 linux gnu
            - test_linux_trusty_i586_nerves_linux_gnu
            - test_linux_xenial_i586_nerves_linux_gnu
            - build_rpi_nerves_toolchain_i586_nerves_linux_gnu

            # mipsel linux musl
            - test_linux_trusty_mipsel_nerves_linux_musl
            - test_linux_xenial_mipsel_nerves_linux_musl
            - build_rpi_nerves_toolchain_mipsel_nerves_linux_musl

            # x86_64 linux gnu
            - test_linux_trusty_x86_64_nerves_linux_gnu
            - test_linux_xenial_x86_64_nerves_linux_gnu
            - build_rpi_nerves_toolchain_x86_64_nerves_linux_gnu

            # x86_64 linux musl
            - test_linux_trusty_x86_64_nerves_linux_musl
            - test_linux_xenial_x86_64_nerves_linux_musl
            - build_rpi_nerves_toolchain_x86_64_nerves_linux_musl

            # riscv linux glibc
            - test_linux_trusty_riscv64_nerves_linux_gnu
            - test_linux_xenial_riscv64_nerves_linux_gnu

            # macOS
            #- build_macos_toolchain
            - test_mac_trusty_aarch64_nerves_linux_gnu-darwin_x86_64
            # aarch64 is incorrect!
            - build_mac_nerves_toolchain_aarch64_nerves_mac_gnu
